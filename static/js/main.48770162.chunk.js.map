{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","countWords","split","filter","el","length","Fragment","style","color","heading","value","rows","onChange","event","target","backgroundColor","newText","toUpperCase","disabled","toLowerCase","copyText","document","getElementById","select","navigator","clipboard","writeText","showAlert","replace","trim","defaultProps","Alert","height","alert","word","low","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.48770162.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} //template literals\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                About\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`} //template literal\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n              aria-checked=\"false\" // ??\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired };\r\n\r\nNavbar.defaultProps = { title: \"Set Title Here\" };\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const onUpCLickHandler = () => {\r\n    // console.log(\"Uppercase was Clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    // props.showAlert(\"success\", \"Converted to Uppercase\");\r\n  };\r\n\r\n  const onLoCLickHandler = () => {\r\n    // console.log(\"Lowercase was Clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    // props.showAlert(\"success\", \"Converted to Lowercase\");\r\n  };\r\n\r\n  const onClearCLickHandler = () => {\r\n    // console.log(\"Text was cleared\");\r\n    setText(\"\");\r\n    props.showAlert(\"warning\", \"Text Cleared\");\r\n  };\r\n\r\n  const onRmSCLickHandler = () => {\r\n    let newText = text.replace(/\\s+/g, \" \").trim();\r\n    setText(newText);\r\n    // props.showAlert(\"success\", \"Removed Extra Spaces\");\r\n  };\r\n\r\n  const onCopyClickHandler = () => {\r\n    let copyText = document.getElementById(\"myBox\");\r\n    copyText.select();\r\n    navigator.clipboard.writeText(copyText.value);\r\n    // document.getSelection().removeAllRanges();\r\n    props.showAlert(\"success\", \"Text Copied\");\r\n  };\r\n\r\n  const onChangeHandler = (event) => {\r\n    // console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const countWords = (text) => {\r\n    return text.split(\" \").filter((el) => {\r\n      return el.length !== 0;\r\n    }).length;\r\n    // return text.trim().split(/\\s+/).length;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h1 className=\"mb-4\">{props.heading}</h1>\r\n\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            id=\"myBox\"\r\n            rows=\"5\"\r\n            onChange={onChangeHandler}\r\n            style={{\r\n              backgroundColor:\r\n                props.mode === \"dark\" ? \"rgb(77 99 122)\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n\r\n        <button\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={onUpCLickHandler}\r\n          disabled={text.length === 0}\r\n        >\r\n          Convert to Uppercase\r\n        </button>\r\n\r\n        <button\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={onLoCLickHandler}\r\n          disabled={text.length === 0}\r\n        >\r\n          Convert to Lowercase\r\n        </button>\r\n\r\n        <button\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={onCopyClickHandler}\r\n          disabled={text.length === 0}\r\n        >\r\n          Copy\r\n        </button>\r\n\r\n        <button\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={onRmSCLickHandler}\r\n          disabled={text.length === 0}\r\n        >\r\n          Remove Extra Space\r\n        </button>\r\n\r\n        <button\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={onClearCLickHandler}\r\n          disabled={text.length === 0}\r\n        >\r\n          Clear\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.length === 0 ? 0 : countWords(text)} words and {text.length}{\" \"}\r\n          characters\r\n        </p>\r\n        <p>{text.length === 0 ? 0 : 0.008 * countWords(text)} Minutes Read</p>\r\n\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const low = word.toLowerCase();\r\n    return low.charAt(0).toUpperCase() + low.slice(1);\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: \"40px\" }}>\r\n      {props.alert && (\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\nimport React, { useState } from \"react\";\n// import { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"rgb(54 71 98)\";\n      showAlert(\"success\", \"Dark Mode Enabled\");\n      // document.title = \"TextUtils-Dark\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"warning\", \"Dark Mode Disabled\");\n      // document.title = \"TextUtils\";\n    }\n  };\n\n  const showAlert = (type, message) => {\n    setAlert({ type: type, msg: message });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  };\n\n  return (\n    <>\n      {/* <BrowserRouter> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n\n      <div className=\"containter my-3\">\n        <TextForm\n          heading=\"Enter the text to analyze\"\n          mode={mode}\n          showAlert={showAlert}\n        />\n\n        {/* <Routes>\n          <Route\n              exact\n              path=\"/\"\n              element={\n                <TextForm\n                  heading=\"Enter the text to analyze\"\n                  mode={mode}\n                  showAlert={showAlert}\n                />\n              }\n            /> */}\n\n        {/* <Route exact path=\"/about\" element={<About mode={mode} />} /> */}\n        {/* </Routes> */}\n      </div>\n      {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}